/*
 * MIT License
 *
 * Copyright (c) 2021 Andre-max
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'androidx.navigation.safeargs.kotlin'
}


android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.andre_max.tiktokclone"
        minSdkVersion 17
        targetSdkVersion 30
        versionCode 1
        versionName "0.1.0"

        vectorDrawables.useSupportLibrary = true

        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Set the properties within `gradle.properties` into a `Properties` class so that values
        // within `gradle.properties` (e.g. Facebook API key) are accessible in this file.
        Properties properties = new Properties()
        if (rootProject.file("gradle.properties").exists()) {
            properties.load(rootProject.file("gradle.properties").newDataInputStream())
        }

        // Inject the Facebook API key and login protocol scheme into the manifest
        manifestPlaceholders = [
                "facebook_app_id": properties.getProperty("facebook_app_id", ""),
                "fb_login_protocol_scheme": properties.getProperty("fb_login_protocol_scheme", "")
        ]
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildTypes.forEach {
        // Facebook
        it.buildConfigField 'String', 'FACEBOOK_APP_ID', facebook_app_id

        // Google
        it.buildConfigField 'String', 'GOOGLE_WEB_CLIENT_ID', GOOGLE_WEB_CLIENT_ID

        // Twitter
        it.buildConfigField 'String', 'TWITTER_CONSUMER_KEY', twitter_consumer_key
        it.buildConfigField 'String', 'TWITTER_CONSUMER_SECRET', twitter_consumer_secret
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs = ["-Xallow-result-return-type"]
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.4.32"
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'

    // Video Compressor
//    implementation 'com.github.AbedElazizShe:LightCompressor:0.7.3'
//    implementation 'com.iceteck.silicompressorr:silicompressor:2.2.4'
//    implementation 'com.googlecode.mp4parser:isoparser:1.1.22'
    implementation 'com.github.Andre-max:VideoCompressor:0.1.0-alpha'

    // Firebase
    implementation 'com.google.firebase:firebase-analytics:18.0.3'
    implementation 'com.google.firebase:firebase-database-ktx:19.7.0'
//    implementation 'com.google.firebase:firebase-firestore-ktx:22.1.2'
    implementation 'com.google.firebase:firebase-messaging:21.1.0'
    implementation 'com.google.firebase:firebase-auth-ktx:20.0.4'
    implementation 'com.google.firebase:firebase-crashlytics-ktx:17.4.1'
    implementation 'com.google.firebase:firebase-storage-ktx:19.2.2'

    // Auth libraries
    implementation 'com.twitter.sdk.android:twitter-core:3.0.0'
    implementation 'com.facebook.android:facebook-android-sdk:5.0.0'
    implementation 'com.google.android.gms:play-services-auth:19.0.0'

    // Country picker
    implementation 'com.hbb20:ccp:2.4.7'

    // ExoPlayer
    implementation 'com.google.android.exoplayer:exoplayer:2.13.3'

    // Timber
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // CircleImageView
    implementation 'de.hdodenhof:circleimageview:3.1.0'

    // Groupie
    implementation 'com.xwray:groupie:2.8.1'
    implementation 'com.xwray:groupie-viewbinding:2.8.1'

    // Edit CodeView
    implementation 'com.bigbangbutton:editcodeview:1.0.6'

    // Dexter
    implementation 'com.karumi:dexter:6.2.2'

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.4.1'
//    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.3"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.3"

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'

    // CameraView
    implementation 'com.otaliastudios:cameraview:2.6.4'

    // Sdp
    implementation 'com.intuit.sdp:sdp-android:1.0.6'
    implementation 'com.intuit.ssp:ssp-android:1.0.6'

    // Test dependencies
    testImplementation 'junit:junit:4.13.2'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation "com.google.truth:truth:1.1.2"
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // SwipeToRefresh
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-common-java8:2.3.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.3.1"

    // Dependencies for local unit tests
    testImplementation "junit:junit:4.13.2"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "org.robolectric:robolectric:4.5.1"
    testImplementation "androidx.test:core-ktx:1.3.0"
    testImplementation "androidx.test.ext:junit:1.1.2"
    testImplementation "com.google.truth:truth:1.1.2"

    // Instrumented testing
    implementation "androidx.test:core:1.3.0"
    implementation "androidx.test.espresso:espresso-idling-resource:3.3.0"
    debugImplementation "androidx.fragment:fragment-testing:1.3.3"
    androidTestImplementation "junit:junit:4.13.2"
    androidTestImplementation "androidx.test.ext:junit:1.1.2"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.3.0"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:3.3.0"
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"

    // Hilt
    implementation 'com.google.dagger:hilt-android:2.33-beta'
    kapt 'com.google.dagger:hilt-compiler:2.33-beta'

    // Hilt ViewModel
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"
    kapt "androidx.hilt:hilt-compiler:1.0.0"

    // For instrumentation tests
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.33-beta'
    kaptAndroidTest 'com.google.dagger:hilt-compiler:2.33-beta'

    // For local unit tests
    testImplementation 'com.google.dagger:hilt-android-testing:2.33-beta'
    kaptTest 'com.google.dagger:hilt-compiler:2.33-beta'
}